---
import Layout from '../layouts/Layout.astro';
---

<Layout title='Z-Chat Chat'>
  <div class='min-h-screen bg-slate-50 flex flex-col'>
    <!-- Header -->
    <header class='bg-white border-b border-slate-200 sticky top-0 z-50'>
      <div class='max-w-7xl mx-auto px-3 sm:px-4 md:px-6 py-3 sm:py-4'>
        <div class='flex items-center justify-between'>
          <div class='flex items-center space-x-2 sm:space-x-3'>
            <img
              src='../src/assets/logo-Sorti-IA.png'
              alt='Z-Chat Logo'
              class='h-8 w-auto'
            />
          </div>
        </div>
      </div>
    </header>

    <div
      class='flex-1 flex flex-col md:flex-row w-full max-w-7xl mx-auto px-3 sm:px-4 md:px-6 py-3 sm:py-4 md:py-6 gap-3 sm:gap-4 md:gap-6'
    >
      <!-- Sidebar with Chat List -->
      <aside
        class='w-full md:w-64 lg:w-80 bg-green-950 flex flex-col shadow-lg md:rounded-xl overflow-hidden order-2 md:order-1'
      >
        <!-- Sidebar Header -->
        <div class='p-3 sm:p-4 border-b border-amber-50'>
          <button
            id='sidebar-new-chat-btn'
            class='w-full p-2 sm:p-3 bg-transparent border border-amber-50 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center justify-center space-x-2'
          >
            <svg
              class='w-3 h-3 sm:w-4 sm:h-4'
              fill='currentColor'
              viewBox='0 0 20 20'
            >
              <path
                fill-rule='evenodd'
                d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z'
                clip-rule='evenodd'
              ></path>
            </svg>
            <span class='text-xs sm:text-sm font-medium'>Nuevo chat</span>
          </button>
        </div>
        <div
          id='chat-list'
          class='flex-1 space-y-1 overflow-y-auto p-2 min-h-0'
        >
          <!-- Chat items will be populated here -->
        </div>

        <!-- Sidebar Footer -->
        <div class='p-3 sm:p-4 border-t border-amber-50'>
          <button
            id='clear-all-btn'
            class='w-full px-2 sm:px-3 py-1.5 sm:py-2 text-xs text-white hover:text-white hover:bg-green-500 rounded-lg transition-colors'
          >
            Limpiar conversaciones
          </button>
        </div>
      </aside>

      <!-- Main Chat Container -->
      <main class='flex-1 flex flex-col min-h-0 order-1 md:order-2 min-w-0'>
        <div
          class='bg-white md:rounded-2xl shadow-lg border border-slate-200 overflow-hidden flex-1 flex flex-col w-full'
        >
          <!-- Chat Header -->
          <div class='bg-white border-b border-slate-200 p-3 sm:p-4'>
            <div class='flex items-center justify-between'>
              <div class='flex items-center space-x-2 sm:space-x-3'>
                <div>
                  <h3
                    id='chat-title'
                    class='text-slate-800 font-semibold text-base sm:text-lg'
                  >
                    <span id='dynamic-model-title'>GPT-4</span>
                  </h3>
                  <p class='text-slate-500 text-xs sm:text-sm'>
                    <span id='model-name'>GPT-4</span>
                  </p>
                </div>
              </div>
              <div class='flex items-center space-x-1 sm:space-x-2'>
                <button
                  id='rename-chat-btn'
                  class='p-1.5 sm:p-2 text-slate-400 hover:text-slate-600 hover:bg-slate-100 rounded-lg transition-colors'
                >
                  <svg
                    class='w-3 h-3 sm:w-4 sm:h-4'
                    fill='currentColor'
                    viewBox='0 0 20 20'
                  >
                    <path
                      d='M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z'
                    ></path>
                  </svg>
                </button>
                <button
                  id='delete-chat-btn'
                  class='p-1.5 sm:p-2 text-slate-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors'
                >
                  <svg
                    class='w-3 h-3 sm:w-4 sm:h-4'
                    fill='currentColor'
                    viewBox='0 0 20 20'
                  >
                    <path
                      fill-rule='evenodd'
                      d='M9 2a1 1 0 000 2h2a1 1 0 100-2H9z'
                      clip-rule='evenodd'
                    ></path>
                    <path
                      fill-rule='evenodd'
                      d='M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z'
                      clip-rule='evenodd'
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Chat Messages Area -->
          <div
            id='chat-box'
            class='flex-1 p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6 overflow-y-auto overflow-x-hidden bg-white w-full'
          >
            <!-- Welcome message -->
            <div class='flex items-start space-x-2 sm:space-x-3'>
              <div class='flex-shrink-0'>
                <div
                  class='w-6 h-6 sm:w-8 sm:h-8 bg-emerald-600 rounded-full flex items-center justify-center'
                >
                  <svg
                    class='w-3 h-3 sm:w-4 sm:h-4 text-white'
                    fill='currentColor'
                    viewBox='0 0 20 20'
                  >
                    <path
                      fill-rule='evenodd'
                      d='M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z'
                      clip-rule='evenodd'
                    ></path>
                  </svg>
                </div>
              </div>
              <div class='flex-1'>
                <div class='max-w-none'>
                  <p class='text-slate-800 text-xs sm:text-sm leading-relaxed'>
                    Â¡Hola! ðŸ‘‹ Soy tu asistente de IA. Â¿En quÃ© puedo ayudarte
                    hoy?
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- Input Area -->
          <div class='p-3 sm:p-4 border-t border-slate-200 bg-white w-full'>
            <div class='max-w-4xl mx-auto w-full'>
              <div
                class='flex items-end space-x-2 sm:space-x-3 bg-white border border-slate-300 rounded-xl p-2 sm:p-3 shadow-sm w-full'
              >
                <div class='flex-1'>
                  <textarea
                    id='message-input'
                    placeholder='EnvÃ­a un mensaje...'
                    class='w-full resize-none border-0 outline-none text-xs sm:text-sm bg-transparent'
                    rows='1'
                  ></textarea>
                </div>
                <button
                  id='send-button'
                  class='p-1.5 sm:p-2 text-slate-400 hover:text-slate-600 transition-colors disabled:opacity-50'
                >
                  <svg
                    class='w-4 h-4 sm:w-5 sm:h-5'
                    fill='currentColor'
                    viewBox='0 0 20 20'
                  >
                    <path
                      d='M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z'
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Modal for renaming chat -->
  <div
    id='rename-modal'
    class='fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50'
  >
    <div class='bg-white rounded-2xl p-4 sm:p-6 w-80 sm:w-96 mx-4 shadow-2xl'>
      <h3
        class='text-base sm:text-lg font-semibold text-slate-900 mb-3 sm:mb-4'
      >
        Renombrar Chat
      </h3>
      <input
        id='rename-input'
        type='text'
        placeholder='Nombre del chat'
        class='w-full px-3 sm:px-4 py-2 sm:py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none text-xs sm:text-sm'
      />
      <div class='flex justify-end space-x-2 sm:space-x-3 mt-4 sm:mt-6'>
        <button
          id='cancel-rename'
          class='px-3 sm:px-4 py-1.5 sm:py-2 text-slate-600 hover:text-slate-800 transition-colors text-xs sm:text-sm'
        >
          Cancelar
        </button>
        <button
          id='confirm-rename'
          class='px-4 sm:px-6 py-1.5 sm:py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors text-xs sm:text-sm'
        >
          Guardar
        </button>
      </div>
    </div>
  </div>

  <!-- Modal for clearing all chats -->
  <div
    id='clear-all-modal'
    class='fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50'
  >
    <div class='bg-white rounded-2xl p-4 sm:p-6 w-80 sm:w-96 mx-4 shadow-2xl'>
      <div class='flex items-center mb-3 sm:mb-4'>
        <div
          class='w-8 h-8 sm:w-10 sm:h-10 bg-red-100 rounded-full flex items-center justify-center mr-3'
        >
          <svg
            class='w-4 h-4 sm:w-5 sm:h-5 text-red-600'
            fill='currentColor'
            viewBox='0 0 20 20'
          >
            <path
              fill-rule='evenodd'
              d='M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z'
              clip-rule='evenodd'
            ></path>
          </svg>
        </div>
        <h3 class='text-base sm:text-lg font-semibold text-slate-900'>
          Limpiar Conversaciones
        </h3>
      </div>
      <p class='text-slate-600 text-xs sm:text-sm mb-4 sm:mb-6'>
        Â¿EstÃ¡s seguro de que quieres eliminar todos los chats? Esta acciÃ³n no se
        puede deshacer.
      </p>
      <div class='flex justify-end space-x-2 sm:space-x-3'>
        <button
          id='cancel-clear-all'
          class='px-3 sm:px-4 py-1.5 sm:py-2 text-slate-600 hover:text-slate-800 transition-colors text-xs sm:text-sm'
        >
          Cancelar
        </button>
        <button
          id='confirm-clear-all'
          class='px-4 sm:px-6 py-1.5 sm:py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-xs sm:text-sm'
        >
          Eliminar Todo
        </button>
      </div>
    </div>
  </div>

  <!-- Modal para eliminar chat individual -->
  <div
    id='delete-chat-modal'
    class='fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50'
  >
    <div class='bg-white rounded-2xl p-4 sm:p-6 w-80 sm:w-96 mx-4 shadow-2xl'>
      <div class='flex items-center mb-3 sm:mb-4'>
        <div
          class='w-8 h-8 sm:w-10 sm:h-10 bg-red-100 rounded-full flex items-center justify-center mr-3'
        >
          <svg
            class='w-4 h-4 sm:w-5 sm:h-5 text-red-600'
            fill='currentColor'
            viewBox='0 0 20 20'
          >
            <path
              fill-rule='evenodd'
              d='M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z'
              clip-rule='evenodd'
            ></path>
          </svg>
        </div>
        <h3 class='text-base sm:text-lg font-semibold text-slate-900'>
          Eliminar Chat
        </h3>
      </div>
      <p class='text-slate-600 text-xs sm:text-sm mb-4 sm:mb-6'>
        Â¿EstÃ¡s seguro de que quieres eliminar este chat? Esta acciÃ³n no se puede
        deshacer.
      </p>
      <div class='flex justify-end space-x-2 sm:space-x-3'>
        <button
          id='cancel-delete-chat'
          class='px-3 sm:px-4 py-1.5 sm:py-2 text-slate-600 hover:text-slate-800 transition-colors text-xs sm:text-sm'
        >
          Cancelar
        </button>
        <button
          id='confirm-delete-chat'
          class='px-4 sm:px-6 py-1.5 sm:py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-xs sm:text-sm'
        >
          Eliminar
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  interface ChatMessage {
    role: 'user' | 'bot';
    content: string;
    timestamp: number;
  }

  interface Chat {
    id: string;
    name: string;
    messages: ChatMessage[];
    createdAt: number;
    lastActivity: number;
  }

  class ChatManager {
    private currentChatId: string | null = null;
    private chats: Map<string, Chat> = new Map();
    private storageKey = 'genai-chats';

    constructor() {
      this.loadChats();
      this.initializeUI();
    }

    private loadChats(): void {
      try {
        const stored = localStorage.getItem(this.storageKey);
        if (stored) {
          const chatsArray: Chat[] = JSON.parse(stored);
          this.chats = new Map(chatsArray.map((chat) => [chat.id, chat]));
        }
      } catch (error) {
        console.error('Error loading chats:', error);
      }
    }

    private saveChats(): void {
      try {
        const chatsArray = Array.from(this.chats.values());
        localStorage.setItem(this.storageKey, JSON.stringify(chatsArray));
      } catch (error) {
        console.error('Error saving chats:', error);
      }
    }

    private generateId(): string {
      return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    private initializeUI(): void {
      this.renderChatList();
      if (this.chats.size === 0) {
        this.createNewChat();
      } else {
        // Load the most recent chat
        const sortedChats = Array.from(this.chats.values()).sort(
          (a, b) => b.lastActivity - a.lastActivity
        );
        this.switchToChat(sortedChats[0].id);
      }
    }

    createNewChat(): void {
      const chatId = this.generateId();
      const newChat: Chat = {
        id: chatId,
        name: `Chat ${this.chats.size + 1}`,
        messages: [],
        createdAt: Date.now(),
        lastActivity: Date.now(),
      };

      this.chats.set(chatId, newChat);
      this.saveChats();
      this.renderChatList();
      this.switchToChat(chatId);
    }

    switchToChat(chatId: string): void {
      const chat = this.chats.get(chatId);
      if (!chat) return;

      this.currentChatId = chatId;
      this.updateChatTitle(chat.name);
      this.renderMessages(chat.messages);
      this.updateCurrentChatName(chat.name);
      this.highlightActiveChat(chatId);
    }

    renameChat(chatId: string, newName: string): void {
      const chat = this.chats.get(chatId);
      if (!chat) return;

      chat.name =
        newName.trim() ||
        `Chat ${Array.from(this.chats.keys()).indexOf(chatId) + 1}`;
      this.saveChats();
      this.renderChatList();

      if (this.currentChatId === chatId) {
        this.updateChatTitle(chat.name);
        this.updateCurrentChatName(chat.name);
      }
    }

    deleteChat(chatId: string): void {
      this.chats.delete(chatId);
      this.saveChats();
      this.renderChatList();

      if (this.currentChatId === chatId) {
        if (this.chats.size === 0) {
          this.createNewChat();
        } else {
          const remainingChats = Array.from(this.chats.values()).sort(
            (a, b) => b.lastActivity - a.lastActivity
          );
          this.switchToChat(remainingChats[0].id);
        }
      }
    }

    clearAllChats(): void {
      this.chats.clear();
      this.saveChats();
      this.renderChatList();
      this.createNewChat();
    }

    addMessage(
      role: 'user' | 'bot',
      content: string,
      shouldScroll: boolean = true
    ): void {
      if (!this.currentChatId) return;

      const chat = this.chats.get(this.currentChatId);
      if (!chat) return;

      const message: ChatMessage = {
        role,
        content,
        timestamp: Date.now(),
      };

      chat.messages.push(message);
      chat.lastActivity = Date.now();

      // Auto-generate chat name from first user message
      if (
        role === 'user' &&
        chat.messages.filter((m) => m.role === 'user').length === 1
      ) {
        const autoName = this.generateChatName(content);
        chat.name = autoName;
        this.updateChatTitle(autoName);
        this.updateCurrentChatName(autoName);
      }

      this.saveChats();
      this.addMessageToDOM(role, content, shouldScroll);
      this.renderChatList(); // Update last activity time
    }

    private updateChatTitle(name: string): void {
      const titleElement = document.getElementById('chat-title');
      if (titleElement) {
        titleElement.textContent = name;
      }
    }

    private updateCurrentChatName(name: string): void {
      const nameElement = document.getElementById('current-chat-name');
      if (nameElement) {
        nameElement.textContent = name;
      }
    }

    private highlightActiveChat(chatId: string): void {
      // This is now handled in renderChatList with the isActive check
      // No need for separate highlighting since we re-render the entire list
    }

    private renderChatList(): void {
      const chatList = document.getElementById('chat-list');
      if (!chatList) return;

      const sortedChats = Array.from(this.chats.values()).sort(
        (a, b) => b.lastActivity - a.lastActivity
      );

      chatList.innerHTML = sortedChats
        .map((chat) => {
          const lastMessage = chat.messages[chat.messages.length - 1];
          const preview = lastMessage
            ? lastMessage.content.length > 50
              ? lastMessage.content.substring(0, 50) + '...'
              : lastMessage.content
            : 'Sin mensajes';

          const timeAgo = this.getTimeAgo(chat.lastActivity);
          const isActive = this.currentChatId === chat.id;

          return `
          <div class="chat-item p-2 sm:p-3 rounded-lg cursor-pointer hover:bg-slate-800 transition-all duration-200 ${isActive ? 'bg-slate-800' : 'bg-transparent'} group" 
               data-chat-id="${chat.id}">
            <div class="flex items-center justify-between">
              <div class="flex-1 min-w-0">
                <h3 class="font-medium text-slate-200 text-xs sm:text-sm truncate">${chat.name}</h3>
                <p class="text-xs text-slate-400 truncate mt-1">${preview}</p>
              </div>
              <div class="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                <button onclick="event.stopPropagation(); chatManager.showRenameModal('${chat.id}')" 
                        class="p-1 text-slate-400 hover:text-slate-200 transition-colors">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                  </svg>
                </button>
                <button onclick="event.stopPropagation(); chatManager.confirmDeleteChat('${chat.id}')" 
                        class="p-1 text-slate-400 hover:text-red-400 transition-colors">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd"></path>
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        `;
        })
        .join('');

      // Add click event listeners to chat items
      setTimeout(() => {
        document.querySelectorAll('.chat-item').forEach((item) => {
          item.addEventListener('click', (e) => {
            const chatId = (e.currentTarget as HTMLElement).getAttribute(
              'data-chat-id'
            );
            if (chatId) {
              this.switchToChat(chatId);
            }
          });
        });
      }, 0);
    }

    private renderMessages(messages: ChatMessage[]): void {
      const chatBox = document.getElementById('chat-box');
      if (!chatBox) return;

      // Clear existing messages except welcome message
      chatBox.innerHTML = `
        <div class='flex items-start space-x-2 sm:space-x-3'>
          <div class='flex-shrink-0'>
            <div class='w-6 h-6 sm:w-8 sm:h-8 bg-emerald-500 rounded-full flex items-center justify-center'>
              <svg class='w-3 h-3 sm:w-4 sm:h-4 text-white' fill='currentColor' viewBox='0 0 20 20'>
                <path fill-rule='evenodd' d='M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z' clip-rule='evenodd'></path>
              </svg>
            </div>
          </div>
          <div class='flex-1'>
            <div class='max-w-none'>
              <p class='text-slate-800 text-xs sm:text-sm leading-relaxed'>
                Â¡Hola! ðŸ‘‹ Soy tu asistente de IA. Â¿En quÃ© puedo ayudarte hoy?
              </p>
            </div>
          </div>
        </div>
      `;

      // Add all messages (don't auto-scroll when rendering existing messages)
      messages.forEach((message, index) => {
        const isLastMessage = index === messages.length - 1;
        this.addMessageToDOM(message.role, message.content, isLastMessage);
      });
    }

    private addMessageToDOM(
      role: 'user' | 'bot',
      content: string,
      shouldScroll: boolean = true
    ): void {
      const chatBox = document.getElementById('chat-box');
      if (!chatBox) return;

      // Check if user is near the bottom before adding message
      const wasNearBottom = this.isNearBottom(chatBox);

      const messageDiv = document.createElement('div');

      if (role === 'user') {
        messageDiv.className =
          'flex items-start space-x-2 sm:space-x-3 justify-end';
        messageDiv.innerHTML = `
          <div class="flex-1 max-w-2xl sm:max-w-3xl">
            <div class="bg-slate-100 rounded-2xl px-3 sm:px-4 py-2 sm:py-3 ml-auto max-w-fit">
              <p class="text-xs sm:text-sm text-slate-900" style="white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word;">${this.escapeHtml(content)}</p>
            </div>
          </div>
          <div class="flex-shrink-0">
            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-500 rounded-full flex items-center justify-center">
              <svg class="w-3 h-3 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
        `;
      } else {
        messageDiv.className = 'flex items-start space-x-2 sm:space-x-3';
        messageDiv.innerHTML = `
          <div class="flex-shrink-0">
            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-emerald-500 rounded-full flex items-center justify-center">
              <svg class="w-3 h-3 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <div class="flex-1 max-w-2xl sm:max-w-3xl">
            <div class="bg-white rounded-2xl px-3 sm:px-4 py-2 sm:py-3 border border-slate-200">
              <p class="text-slate-800 text-xs sm:text-sm leading-relaxed" style="white-space: pre-wrap; word-wrap: break-word; overflow-wrap: break-word;">${this.escapeHtml(content)}</p>
            </div>
          </div>
        `;
      }

      chatBox.appendChild(messageDiv);

      // Only scroll if user was near bottom or if it's a user message or shouldScroll is true
      if (shouldScroll && (wasNearBottom || role === 'user')) {
        chatBox.scrollTop = chatBox.scrollHeight;
      }
    }

    private isNearBottom(element: HTMLElement): boolean {
      const threshold = 100; // pixels from bottom
      return (
        element.scrollTop + element.clientHeight >=
        element.scrollHeight - threshold
      );
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private getTimeAgo(timestamp: number): string {
      const now = Date.now();
      const diff = now - timestamp;
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(diff / 3600000);
      const days = Math.floor(diff / 86400000);

      if (days > 0) return `${days}d`;
      if (hours > 0) return `${hours}h`;
      if (minutes > 0) return `${minutes}m`;
      return 'ahora';
    }

    private generateChatName(firstMessage: string): string {
      // Clean and truncate the message for the chat name
      let name = firstMessage.trim();

      // Remove common question words and clean up
      name = name.replace(
        /^(quÃ©|cÃ³mo|cuÃ¡l|cuÃ¡ndo|dÃ³nde|por quÃ©|quiÃ©n|what|how|which|when|where|why|who)\s+/i,
        ''
      );

      // Truncate to reasonable length
      if (name.length > 40) {
        name = name.substring(0, 40).trim();
        // Try to cut at word boundary
        const lastSpace = name.lastIndexOf(' ');
        if (lastSpace > 20) {
          name = name.substring(0, lastSpace);
        }
        name += '...';
      }

      // Capitalize first letter
      name = name.charAt(0).toUpperCase() + name.slice(1);

      return name || 'Nuevo Chat';
    }

    showRenameModal(chatId: string): void {
      const chat = this.chats.get(chatId);
      if (!chat) return;

      const modal = document.getElementById('rename-modal');
      const input = document.getElementById('rename-input') as HTMLInputElement;

      if (modal && input) {
        input.value = chat.name;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        input.focus();
        input.select();

        // Store the chat ID for the rename operation
        modal.setAttribute('data-chat-id', chatId);
      }
    }

    confirmDeleteChat(chatId: string): void {
      const deleteChatModal = document.getElementById('delete-chat-modal');
      if (deleteChatModal) {
        deleteChatModal.setAttribute('data-chat-id', chatId);
        deleteChatModal.classList.remove('hidden');
        deleteChatModal.classList.add('flex');
      }
    }

    getCurrentChatId(): string | null {
      return this.currentChatId;
    }
  }

  // Global chat manager instance
  let chatManager: ChatManager;

  // Make chatManager globally accessible
  declare global {
    interface Window {
      chatManager: ChatManager;
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    const messageInput = document.getElementById(
      'message-input'
    ) as HTMLTextAreaElement;
    const sendButton = document.getElementById(
      'send-button'
    ) as HTMLButtonElement;
    const modelNameSpan = document.getElementById('model-name') as HTMLElement;
    const dynamicModelTitle = document.getElementById(
      'dynamic-model-title'
    ) as HTMLElement;

    const clearAllBtn = document.getElementById(
      'clear-all-btn'
    ) as HTMLButtonElement;
    const renameChatBtn = document.getElementById(
      'rename-chat-btn'
    ) as HTMLButtonElement;
    const deleteChatBtn = document.getElementById(
      'delete-chat-btn'
    ) as HTMLButtonElement;
    const renameModal = document.getElementById('rename-modal') as HTMLElement;
    const renameInput = document.getElementById(
      'rename-input'
    ) as HTMLInputElement;
    const confirmRename = document.getElementById(
      'confirm-rename'
    ) as HTMLButtonElement;
    const cancelRename = document.getElementById(
      'cancel-rename'
    ) as HTMLButtonElement;

    // Initialize chat manager
    chatManager = new ChatManager();
    window.chatManager = chatManager;

    // Auto-resize textarea
    function autoResize() {
      messageInput.style.height = 'auto';
      messageInput.style.height =
        Math.min(messageInput.scrollHeight, 128) + 'px';
    }

    messageInput.addEventListener('input', autoResize);

    // Get model info
    fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: '!modelinfo' }),
    })
      .then((response) => response.json())
      .then((data) => {
        const modelName = data.model || 'AI Language Model';
        if (modelNameSpan) {
          modelNameSpan.textContent = modelName;
        }
        if (dynamicModelTitle) {
          dynamicModelTitle.textContent = modelName;
        }
        if (messageInput) {
          messageInput.placeholder = `EnvÃ­a un mensaje a ${modelName}...`;
        }
      })
      .catch((error) => {
        if (modelNameSpan) {
          modelNameSpan.textContent = 'AI Language Model';
        }
      });

    function sendMessage() {
      let message = messageInput.value.trim();
      if (!message) return;

      // Disable send button and input during request
      sendButton.disabled = true;
      messageInput.disabled = true;
      sendButton.classList.add('opacity-50', 'cursor-not-allowed');
      messageInput.classList.add('opacity-50');

      const messageForApi = message + ' en espaÃ±ol';
      // Add user message to current chat
      chatManager.addMessage('user', message);
      messageInput.value = '';
      autoResize();

      // Show loading indicator
      const chatBox = document.getElementById('chat-box');
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'flex items-start space-x-3';
      loadingDiv.innerHTML = `
        <div class="flex-shrink-0">
          <div class="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
            <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          </div>
        </div>
        <div class="flex-1">
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl px-4 py-3 max-w-md shadow-sm border border-gray-200">
            <p class="text-gray-600 italic text-sm">Pensando...</p>
          </div>
        </div>
      `;
      if (chatBox) {
        chatBox.appendChild(loadingDiv);
        // Always scroll to bottom when showing loading indicator
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Send message to API
      fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: messageForApi }),
      })
        .then((response) => response.json())
        .then((data) => {
          // Remove loading indicator
          if (loadingDiv.parentNode) {
            loadingDiv.parentNode.removeChild(loadingDiv);
          }

          // Add bot's response to current chat
          if (data.error) {
            chatManager.addMessage(
              'bot',
              'Lo siento, encontrÃ© un error. Por favor, intÃ©ntalo de nuevo.'
            );
          } else {
            chatManager.addMessage('bot', data.response);
          }
        })
        .catch((error) => {
          // Remove loading indicator
          if (loadingDiv.parentNode) {
            loadingDiv.parentNode.removeChild(loadingDiv);
          }
          // Show error message
          chatManager.addMessage(
            'bot',
            'Lo siento, encontrÃ© un error. Por favor, intÃ©ntalo de nuevo.'
          );
          console.error('Error:', error);
        })
        .finally(() => {
          // Re-enable send button and input
          sendButton.disabled = false;
          messageInput.disabled = false;
          sendButton.classList.remove('opacity-50', 'cursor-not-allowed');
          messageInput.classList.remove('opacity-50');
          messageInput.focus();
        });
    }

    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // New chat button event listener

    const sidebarNewChatBtn = document.getElementById('sidebar-new-chat-btn');
    if (sidebarNewChatBtn) {
      sidebarNewChatBtn.addEventListener('click', () => {
        chatManager.createNewChat();
      });
    }

    clearAllBtn.addEventListener('click', () => {
      const clearAllModal = document.getElementById('clear-all-modal');
      if (clearAllModal) {
        clearAllModal.classList.remove('hidden');
        clearAllModal.classList.add('flex');
      }
    });

    renameChatBtn.addEventListener('click', () => {
      const currentChatId = chatManager.getCurrentChatId();
      if (currentChatId) {
        chatManager.showRenameModal(currentChatId);
      }
    });

    deleteChatBtn.addEventListener('click', () => {
      const currentChatId = chatManager.getCurrentChatId();
      if (currentChatId) {
        chatManager.confirmDeleteChat(currentChatId);
      }
    });

    // Modal event listeners
    confirmRename.addEventListener('click', () => {
      const chatId = renameModal.getAttribute('data-chat-id');
      const newName = renameInput.value.trim();

      if (chatId && newName) {
        chatManager.renameChat(chatId, newName);
      }

      renameModal.classList.add('hidden');
      renameModal.classList.remove('flex');
    });

    cancelRename.addEventListener('click', () => {
      renameModal.classList.add('hidden');
      renameModal.classList.remove('flex');
    });

    // Close modal on backdrop click
    renameModal.addEventListener('click', (e) => {
      if (e.target === renameModal) {
        renameModal.classList.add('hidden');
        renameModal.classList.remove('flex');
      }
    });

    // Handle Enter key in rename input
    renameInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        confirmRename.click();
      } else if (e.key === 'Escape') {
        cancelRename.click();
      }
    });

    // Clear all modal event listeners
    const clearAllModal = document.getElementById('clear-all-modal');
    const confirmClearAll = document.getElementById('confirm-clear-all');
    const cancelClearAll = document.getElementById('cancel-clear-all');

    if (confirmClearAll && clearAllModal) {
      confirmClearAll.addEventListener('click', () => {
        chatManager.clearAllChats();
        clearAllModal.classList.add('hidden');
        clearAllModal.classList.remove('flex');
      });
    }

    if (cancelClearAll && clearAllModal) {
      cancelClearAll.addEventListener('click', () => {
        clearAllModal.classList.add('hidden');
        clearAllModal.classList.remove('flex');
      });
    }

    // Close clear all modal on backdrop click
    if (clearAllModal) {
      clearAllModal.addEventListener('click', (e) => {
        if (e.target === clearAllModal) {
          clearAllModal.classList.add('hidden');
          clearAllModal.classList.remove('flex');
        }
      });
    }

    // Delete chat modal event listeners
    const deleteChatModal = document.getElementById('delete-chat-modal');
    const confirmDeleteChatBtn = document.getElementById('confirm-delete-chat');
    const cancelDeleteChatBtn = document.getElementById('cancel-delete-chat');

    if (confirmDeleteChatBtn && deleteChatModal) {
      confirmDeleteChatBtn.addEventListener('click', () => {
        const chatId = deleteChatModal.getAttribute('data-chat-id');
        if (chatId) {
          chatManager.deleteChat(chatId);
        }
        deleteChatModal.classList.add('hidden');
        deleteChatModal.classList.remove('flex');
      });
    }

    if (cancelDeleteChatBtn && deleteChatModal) {
      cancelDeleteChatBtn.addEventListener('click', () => {
        deleteChatModal.classList.add('hidden');
        deleteChatModal.classList.remove('flex');
      });
    }

    // Close delete chat modal on backdrop click
    if (deleteChatModal) {
      deleteChatModal.addEventListener('click', (e) => {
        if (e.target === deleteChatModal) {
          deleteChatModal.classList.add('hidden');
          deleteChatModal.classList.remove('flex');
        }
      });
    }
  });
</script>
